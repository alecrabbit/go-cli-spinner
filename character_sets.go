package spinner

import (
	"fmt"

	"github.com/mattn/go-runewidth"
)

const (
	clockOneOClock = '\U0001F550'
	clockOneThirty = '\U0001F55C'
)

// Declared spinner types
const (
	BlockVertical int = iota
	// Arrows
	BouncingBlock
	BouncingBlock2
	RotatingCircle
	Clock
	HalfClock
	Snake
	Snake2
	Snake3
	Dots13
	Dots14
	BlockHorizontal
	// Toggle
	Arrows01
	Arrows02
	Arrows03
	Arrows04
	Dots21
	Dots22
	Dots23
	Dots24
	Dots25
	Dots26
	Dev
	Dev2
	// Weather
	Simple
)

// Line is alias for Simple
const Line = Simple

// CharSets contains the available character sets
var CharSets = map[int][]string{
	// Arrows: {"Рєљ", "Рєќ", "РєЉ", "РєЌ", "Рєњ", "Рєў", "РєЊ", "РєЎ"}, // Ambiguous width
	// Рєљ 1
	// Рєќ 2
	// РєЉ 1
	// РєЌ 2
	// Рєњ 1
	// Рєў 2
	// РєЊ 1
	// РєЎ 2

	Arrows01:       {"Рєљ", "РєЉ", "Рєњ", "РєЊ"},
	Arrows02:       {"Рєќ", "РєЌ", "Рєў", "РєЎ"},
	Arrows03:       {"РЄљ", "РЄќ", "РЄЉ", "РЄЌ", "РЄњ", "РЄў", "РЄЊ", "РЄЎ"},
	Arrows04:       {"Рќ╣Рќ╣Рќ╣Рќ╣Рќ╣", "РќИРќ╣Рќ╣Рќ╣Рќ╣", "Рќ╣РќИРќ╣Рќ╣Рќ╣", "Рќ╣Рќ╣РќИРќ╣Рќ╣", "Рќ╣Рќ╣Рќ╣РќИРќ╣", "Рќ╣Рќ╣Рќ╣Рќ╣РќИ"},
	Dev:            {"+"},                                              // Singe character used for dev purposes
	Dev2:           {"0", "1", "2", "3", "4", "5", "6", "7", "8", "9"}, // Number characters used for dev purposes
	BlockVertical:  {"РќЂ", "РќЃ", "Рќё", "РќЁ", "Рќє", "РќЄ", "Рќѕ", "РќЄ", "Рќє", "РќЁ", "Рќё", "РќЃ", "РќЂ"},
	BouncingBlock:  {"Рќќ", "Рќў", "РќЮ", "РќЌ"},
	RotatingCircle: {"РЌљ", "РЌЊ", "РЌЉ", "РЌњ"},
	Snake:          {"РБЙ", "РБй", "РБ╗", "Рб┐", "РА┐", "РБЪ", "РБ»", "РБи"},
	Snake2:         {"РаЈ", "РаЏ", "Ра╣", "РбИ", "РБ░", "РБц", "РБє", "РАЄ"},
	Snake3: {
		"РбђРађ", "РАђРађ", "РаёРађ", "РбѓРађ", "РАѓРађ", "РаЁРађ", "РбЃРађ", "РАЃРађ", "РаЇРађ", "РбІРађ", "РАІРађ", "РаЇРаЂ", "РбІРаЂ", "РАІРаЂ", "РаЇРаЅ", "РаІРаЅ", "РаІРаЅ",
		"РаЅРаЎ", "РаЅРаЎ", "РаЅРаЕ", "РаѕРбЎ", "РаѕРАЎ", "РбѕРаЕ", "РАђРбЎ", "РаёРАЎ", "РбѓРаЕ", "РАѓРбў", "РаЁРАў", "РбЃРае", "РАЃРбљ", "РаЇРАљ", "РбІРаа", "РАІРбђ", "РаЇРАЂ",
		"РбІРаЂ", "РАІРаЂ", "РаЇРаЅ", "РаІРаЅ", "РаІРаЅ", "РаЅРаЎ", "РаЅРаЎ", "РаЅРаЕ", "РаѕРбЎ", "РаѕРАЎ", "РаѕРаЕ", "РађРбЎ", "РађРАЎ", "РађРаЕ", "РађРбў", "РађРАў", "РађРае",
		"РађРбљ", "РађРАљ", "РађРаа", "РађРбђ", "РађРАђ",
	},
	BlockHorizontal: {"РќЅ", "Рќі", "РќІ", "Рќї", "РќЇ", "Рќј", "РќЈ", "Рќј", "РќЇ", "Рќї", "РќІ", "Рќі", "РќЅ"},
	BouncingBlock2: {
		"|   ", " |  ", "  | ", "   |", "   |", "  | ", " |  ", "|   "},
	Dots13: {"РаЂ", "Раѓ", "Раё", "РАђ", "Рбђ", "Раа", "Раљ", "Раѕ"},
	Dots14: {"РаІ", "РаЎ", "Ра╣", "РаИ", "Ра╝", "Ра┤", "Рад", "РаД", "РаЄ", "РаЈ"},

	Dots21: {"РаЂ", "РаЂ", "РаЅ", "РаЎ", "Раџ", "Рањ", "Раѓ", "Раѓ", "Рањ", "Ра▓", "Ра┤", "Рац", "Раё", "Раё", "Рац", "Раа", "Раа", "Рац", "Рад", "Раќ", "Рањ", "Раљ", "Раљ", "Рањ", "РаЊ", "РаІ", "РаЅ", "Раѕ", "Раѕ"},
	Dots22: {"Раѕ", "РаЅ", "РаІ", "РаЊ", "Рањ", "Раљ", "Раљ", "Рањ", "Раќ", "Рад", "Рац", "Раа", "Раа", "Рац", "Рад", "Раќ", "Рањ", "Раљ", "Раљ", "Рањ", "РаЊ", "РаІ", "РаЅ", "Раѕ"},
	Dots23: {"РаЂ", "РаЅ", "РаЎ", "Раџ", "Рањ", "Раѓ", "Раѓ", "Рањ", "Ра▓", "Ра┤", "Рац", "Раё", "Раё", "Рац", "Ра┤", "Ра▓", "Рањ", "Раѓ", "Раѓ", "Рањ", "Раџ", "РаЎ", "РаЅ", "РаЂ"},
	Dots24: {"РаІ", "РаЎ", "Раџ", "Рањ", "Раѓ", "Раѓ", "Рањ", "Ра▓", "Ра┤", "Рад", "Раќ", "Рањ", "Раљ", "Раљ", "Рањ", "РаЊ", "РаІ"},
	Dots25: {".  ", ".. ", "...", " ..", "  .", "   "},
	Dots26: {"Рб╣", "Рб║", "Рб╝", "РБИ", "РБЄ", "РАД", "РАЌ", "РАЈ"},

	// Toggle:          {"Рќа", "РќА", "Рќф", "РќФ"}, // Ambiguous width
	// Рќа 1
	// РќА 1
	// Рќф 2
	// РќФ 2
	// Weather: { // Ambiguous width
	//     "­Ъїц ", "­Ъїц ", "­Ъїц ", "­Ъїц ", "РЏЁ№ИЈ", "­ЪїЦ ", "РўЂ№ИЈ ", "­ЪїД ", "­Ъїе ", "­ЪїД ", "­Ъїе ", "­ЪїД ", "­Ъїе ", "РЏѕ ",
	//     "РЏѕ ", "­Ъїе ", "РЏѕ ", "­ЪїД ", "­Ъїе ", "РўЂ№ИЈ ", "­ЪїЦ ", "РЏЁ№ИЈ", "­Ъїц ",
	// },
	Simple: {"|", "\\", "Рћђ", "/"},
}

func init() {
	// Fill clocks char sets
	for i := rune(0); i < 12; i++ {
		CharSets[Clock] = append(CharSets[Clock], string([]rune{clockOneOClock + i}))
		CharSets[HalfClock] = append(CharSets[HalfClock], string([]rune{clockOneOClock + i}), string([]rune{clockOneThirty + i}))
	}
	checkCharSets()
}

func checkCharSets() {
	// Check CharSets for width conformity
	for n := range CharSets {
		var widths []int
		for _, c := range CharSets[n] {
			width := runewidth.StringWidth(c)
			widths = append(widths, width)
		}
		for _, w := range widths {
			if w != widths[0] {
				panic(fmt.Sprintf("\nAmbiguous widths for char set [%v]\n %v\n %v\n", n, CharSets[n], widths))
			}
		}
	}
}
