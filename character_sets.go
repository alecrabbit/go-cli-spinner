package spinner

import (
	"fmt"
	"time"

	"github.com/mattn/go-runewidth"

	"github.com/alecrabbit/go-cli-spinner/color"
)

const (
	clockOneOClock = '\U0001F550'
	clockOneThirty = '\U0001F55C'
)

// maxCharSetSize maximum character set elements count
const maxCharSetSize = 60

// Declared spinner variants
const (
	BlockVertical int = iota
	// Arrows
	BouncingBlock
	Blink
	FlyingLine
	RotatingCircle
	Clock
	HalfClock
	HalfClock2
	Snake
	Snake2
	FlyingDots
	Dots10
	Dots13
	Dots14
	BlockHorizontal
	Toggle
	ToggleSmall
	Arrows01
	Arrows02
	Arrows03
	Arrows04
	Dots21
	Dots22
	Dots23
	Dots24
	Dots25
	Dots26
	Dev
	Dev2
	// Weather
	Simple
)

// Line is alias for Simple
const Line = Simple

type settings struct {
	interval time.Duration // interval between spinner refreshes
	chars    []string      //
	palette  *palette      //
}

// palette ...
type palette map[int]map[color.Level]int

// defaultPalette ...
var defaultPalette = palette{
	Char: {
		color.TTrueColor: color.C256Rainbow,
		color.TColor256:  color.C256Rainbow,
		color.TColor16:   color.CLightCyan,
	},
	Message: {
		color.TTrueColor: color.CDark,
		color.TColor256:  color.CDark,
		color.TColor16:   color.CDark,
	},
	Progress: {
		color.TTrueColor: color.C256YellowWhite,
		color.TColor256:  color.C256YellowWhite,
		color.TColor16:   color.CDark,
	},
}

// CharSets contains the available character sets
var CharSets = map[int]settings{
	// Arrows: {
	//     120,
	//     []string{"‚Üê", "‚Üñ", "‚Üë", "‚Üó", "‚Üí", "‚Üò", "‚Üì", "‚Üô"}, // Ambiguous width, issue in runewidth
	// },
	// ‚Üê 1
	// ‚Üñ 2
	// ‚Üë 1
	// ‚Üó 2
	// ‚Üí 1
	// ‚Üò 2
	// ‚Üì 1
	// ‚Üô 2

	Arrows01: {
		120 * time.Millisecond,
		[]string{"‚Üê", "‚Üë", "‚Üí", "‚Üì"},
		&defaultPalette,
	},
	Arrows02: {
		120 * time.Millisecond,
		[]string{"‚Üñ", "‚Üó", "‚Üò", "‚Üô"},
		&defaultPalette,
	},
	Arrows03: {
		120 * time.Millisecond,
		[]string{"‚áê", "‚áñ", "‚áë", "‚áó", "‚áí", "‚áò", "‚áì", "‚áô"},
		&defaultPalette,
	},
	Arrows04: {
		120 * time.Millisecond,
		[]string{"‚ñπ‚ñπ‚ñπ‚ñπ‚ñπ", "‚ñ∏‚ñπ‚ñπ‚ñπ‚ñπ", "‚ñπ‚ñ∏‚ñπ‚ñπ‚ñπ", "‚ñπ‚ñπ‚ñ∏‚ñπ‚ñπ", "‚ñπ‚ñπ‚ñπ‚ñ∏‚ñπ", "‚ñπ‚ñπ‚ñπ‚ñπ‚ñ∏"},
		&defaultPalette,
	},
	Simple: {
		120 * time.Millisecond,
		[]string{"|", "\\", "‚îÄ", "/"},
		&defaultPalette,
	},
	Dev: { // Singe character used for dev purposes
		400 * time.Millisecond,
		[]string{"+"},
		&defaultPalette,
	},
	Dev2: { // Number characters used for dev purposes
		250 * time.Millisecond,
		[]string{"0", "1", "2", "3", "4", "5", "6", "7", "8", "9"},
		&defaultPalette,
	},
	BlockVertical: {
		120 * time.Millisecond,
		[]string{"‚ñÅ", "‚ñÉ", "‚ñÑ", "‚ñÖ", "‚ñÜ", "‚ñá", "‚ñà", "‚ñá", "‚ñÜ", "‚ñÖ", "‚ñÑ", "‚ñÉ", "‚ñÅ"},
		&defaultPalette,
	},
	BlockHorizontal: {
		120 * time.Millisecond,
		[]string{"‚ñâ", "‚ñä", "‚ñã", "‚ñå", "‚ñç", "‚ñé", "‚ñè", "‚ñé", "‚ñç", "‚ñå", "‚ñã", "‚ñä", "‚ñâ"},
		&defaultPalette,
	},
	BouncingBlock: {
		120 * time.Millisecond,
		[]string{"‚ññ", "‚ñò", "‚ñù", "‚ñó"},
		&defaultPalette,
	},
	RotatingCircle: {
		120 * time.Millisecond,
		[]string{"‚óê", "‚óì", "‚óë", "‚óí"},
		&defaultPalette,
	},
	Snake: {
		150 * time.Millisecond,
		[]string{"‚£æ", "‚£Ω", "‚£ª", "‚¢ø", "‚°ø", "‚£ü", "‚£Ø", "‚£∑"},
		&defaultPalette,
	},
	Snake2: {
		120 * time.Millisecond,
		[]string{"‚†è", "‚†õ", "‚†π", "‚¢∏", "‚£∞", "‚£§", "‚£Ü", "‚°á"},
		&defaultPalette,
	},
	FlyingDots: {
		120 * time.Millisecond,
		[]string{
			"‚¢Ä‚†Ä", "‚°Ä‚†Ä", "‚†Ñ‚†Ä", "‚¢Ç‚†Ä", "‚°Ç‚†Ä", "‚†Ö‚†Ä", "‚¢É‚†Ä", "‚°É‚†Ä", "‚†ç‚†Ä", "‚¢ã‚†Ä", "‚°ã‚†Ä", "‚†ç‚†Å", "‚¢ã‚†Å", "‚°ã‚†Å", "‚†ç‚†â", "‚†ã‚†â", "‚†ã‚†â",
			"‚†â‚†ô", "‚†â‚†ô", "‚†â‚†©", "‚†à‚¢ô", "‚†à‚°ô", "‚¢à‚†©", "‚°Ä‚¢ô", "‚†Ñ‚°ô", "‚¢Ç‚†©", "‚°Ç‚¢ò", "‚†Ö‚°ò", "‚¢É‚†®", "‚°É‚¢ê", "‚†ç‚°ê", "‚¢ã‚††", "‚°ã‚¢Ä", "‚†ç‚°Å",
			"‚¢ã‚†Å", "‚°ã‚†Å", "‚†ç‚†â", "‚†ã‚†â", "‚†ã‚†â", "‚†â‚†ô", "‚†â‚†ô", "‚†â‚†©", "‚†à‚¢ô", "‚†à‚°ô", "‚†à‚†©", "‚†Ä‚¢ô", "‚†Ä‚°ô", "‚†Ä‚†©", "‚†Ä‚¢ò", "‚†Ä‚°ò", "‚†Ä‚†®",
			"‚†Ä‚¢ê", "‚†Ä‚°ê", "‚†Ä‚††", "‚†Ä‚¢Ä", "‚†Ä‚°Ä",
		},
		&defaultPalette,
	},
	FlyingLine: {
		120 * time.Millisecond,
		[]string{"|   ", " |  ", "  | ", "   |", "   |", "  | ", " |  ", "|   "},
		&defaultPalette,
	},
	Dots10: {
		120 * time.Millisecond,
		[]string{"‚¢Ñ", "‚¢Ç", "‚¢Å", "‚°Å", "‚°à", "‚°ê", "‚°†"},
		&defaultPalette,
	},
	Dots13: {
		120 * time.Millisecond,
		[]string{"‚†Å", "‚†Ç", "‚†Ñ", "‚°Ä", "‚¢Ä", "‚††", "‚†ê", "‚†à"},
		&defaultPalette,
	},
	Dots14: {
		120 * time.Millisecond,
		[]string{"‚†ã", "‚†ô", "‚†π", "‚†∏", "‚†º", "‚†¥", "‚†¶", "‚†ß", "‚†á", "‚†è"},
		&defaultPalette,
	},
	Dots21: {
		120 * time.Millisecond,
		[]string{
			"‚†Å", "‚†Å", "‚†â", "‚†ô", "‚†ö", "‚†í", "‚†Ç", "‚†Ç", "‚†í", "‚†≤", "‚†¥", "‚†§", "‚†Ñ", "‚†Ñ",
			"‚†§", "‚††", "‚††", "‚†§", "‚†¶", "‚†ñ", "‚†í", "‚†ê", "‚†ê", "‚†í", "‚†ì", "‚†ã", "‚†â", "‚†à", "‚†à",
		},
		&defaultPalette,
	},
	Dots22: {
		120 * time.Millisecond,
		[]string{
			"‚†à", "‚†â", "‚†ã", "‚†ì", "‚†í", "‚†ê", "‚†ê", "‚†í", "‚†ñ", "‚†¶", "‚†§", "‚††",
			"‚††", "‚†§", "‚†¶", "‚†ñ", "‚†í", "‚†ê", "‚†ê", "‚†í", "‚†ì", "‚†ã", "‚†â", "‚†à",
		},
		&defaultPalette,
	},
	Dots26: {
		120 * time.Millisecond,
		[]string{"‚¢π", "‚¢∫", "‚¢º", "‚£∏", "‚£á", "‚°ß", "‚°ó", "‚°è"},
		&defaultPalette,
	},
	Blink: {
		200 * time.Millisecond,
		[]string{"‚ñì", "‚ñí", "‚ñë"},
		&defaultPalette,
	},
	Toggle: {
		250 * time.Millisecond,
		[]string{"‚ñ†", "‚ñ°"},
		&defaultPalette,
	},
	Dots23: {
		120 * time.Millisecond,
		[]string{
			"‚†Å", "‚†â", "‚†ô", "‚†ö", "‚†í", "‚†Ç", "‚†Ç", "‚†í", "‚†≤", "‚†¥", "‚†§", "‚†Ñ",
			"‚†Ñ", "‚†§", "‚†¥", "‚†≤", "‚†í", "‚†Ç", "‚†Ç", "‚†í", "‚†ö", "‚†ô", "‚†â", "‚†Å",
		},
		&defaultPalette,
	},
	Dots24: {
		120 * time.Millisecond,
		[]string{".  ", ".. ", "...", " ..", "  .", "   "},
		&defaultPalette,
	},
	Dots25: {
		120 * time.Millisecond,
		[]string{"‚†ã", "‚†ô", "‚†ö", "‚†í", "‚†Ç", "‚†Ç", "‚†í", "‚†≤", "‚†¥", "‚†¶", "‚†ñ", "‚†í", "‚†ê", "‚†ê", "‚†í", "‚†ì", "‚†ã"},
		&defaultPalette,
	},
	// ToggleSmall: { // Incorrect width 2 instead of 1 (runewidth issue)
	//     250,
	//     []string{"‚ñ™", "‚ñ´"},
	// },

	// ********
	// // Toggle:          {"‚ñ†", "‚ñ°", "‚ñ™", "‚ñ´"}, // Ambiguous width
	// // ‚ñ† 1
	// // ‚ñ° 1
	// // ‚ñ™ 2
	// // ‚ñ´ 2
	// // Weather: { // Ambiguous width
	// //     "üå§ ", "üå§ ", "üå§ ", "üå§ ", "‚õÖÔ∏è", "üå• ", "‚òÅÔ∏è ", "üåß ", "üå® ", "üåß ", "üå® ", "üåß ", "üå® ", "‚õà ",
	// //     "‚õà ", "üå® ", "‚õà ", "üåß ", "üå® ", "‚òÅÔ∏è ", "üå• ", "‚õÖÔ∏è", "üå§ ",
	// // },
}

func init() {
	fillCharSets()

	// Check CharSets for width conformity
	for n := range CharSets {
		err := checkCharSet(CharSets[n].chars)
		if err != nil {
			panic(err)
		}
	}
}

func fillCharSets() {
	var clockChars []string
	var halfClockChars []string
	var halfClockChars2 []string
	// Fill clocks char sets
	for i := rune(0); i < 12; i++ {
		clockChars = append(clockChars, string([]rune{clockOneOClock + i}))
		halfClockChars = append(halfClockChars, string([]rune{clockOneOClock + i}), string([]rune{clockOneThirty + i}))
	}
	halfClockChars2 = make([]string, len(clockChars))
	copy(halfClockChars2, clockChars)
	for i := rune(0); i < 12; i++ {
		halfClockChars2 = append(halfClockChars2, string([]rune{clockOneThirty + i}))
	}
	// Create clock sets
	CharSets[Clock] = settings{
		150 * time.Millisecond,
		clockChars,
		&defaultPalette,
	}
	CharSets[HalfClock] = settings{
		300 * time.Millisecond,
		halfClockChars,
		&defaultPalette,
	}
	CharSets[HalfClock2] = settings{
		150 * time.Millisecond,
		halfClockChars2,
		&defaultPalette,
	}
}

func checkCharSet(c []string) error {
	if l := len(c); l > maxCharSetSize {
		return fmt.Errorf("spinner: given charset is too big: %v, max: %v", l, maxCharSetSize)
	}
	var widths []int
	for _, c := range c {
		width := runewidth.StringWidth(c)
		widths = append(widths, width)
	}
	for _, w := range widths {
		if w != widths[0] {
			return fmt.Errorf("spinner: ambiguous widths for char set:\n %v\n %v", c, widths)
		}
	}
	return nil
}
